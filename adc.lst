CCS PCH C Compiler, Version 4.140, 22098               09-out-14 16:29

               Filename:   D:\Projetos\ADC\adc.lst

               ROM used:   2676 bytes (8%)
                           Largest free fragment is 30092
               RAM used:   35 (2%) at main() level
                           62 (4%) worst case
               Stack:     2 locations

*
0000:  GOTO   096A
.................... /* 
....................  * adc.c 
....................  * 
....................  *  Created on: 19/04/2013 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #include <18F252.h> 
.................... //////// Standard Header file for the PIC18F252 device //////////////// 
.................... #device PIC18F252 
.................... #list 
....................  
.................... #DEVICE ADC=10 
....................  
.................... #FUSES HS 
.................... #USE delay(clock=15MHz) 
0940:  CLRF   FEA
0942:  MOVLW  21
0944:  MOVWF  FE9
0946:  MOVF   FEF,W
0948:  BZ    0966
094A:  MOVLW  04
094C:  MOVWF  01
094E:  CLRF   00
0950:  DECFSZ 00,F
0952:  BRA    0950
0954:  DECFSZ 01,F
0956:  BRA    094E
0958:  MOVLW  DC
095A:  MOVWF  00
095C:  DECFSZ 00,F
095E:  BRA    095C
0960:  NOP   
0962:  DECFSZ FEF,F
0964:  BRA    094A
0966:  GOTO   0A6C (RETURN)
.................... #USE rs232(xmit=PIN_C6, baud=9600) 
*
0788:  BCF    F94.6
078A:  BCF    F8B.6
078C:  MOVLW  08
078E:  MOVWF  01
0790:  BRA    0792
0792:  NOP   
0794:  BSF    01.7
0796:  BRA    07B4
0798:  BCF    01.7
079A:  RRCF   2E,F
079C:  BTFSC  FD8.0
079E:  BSF    F8B.6
07A0:  BTFSS  FD8.0
07A2:  BCF    F8B.6
07A4:  BSF    01.6
07A6:  BRA    07B4
07A8:  BCF    01.6
07AA:  DECFSZ 01,F
07AC:  BRA    079A
07AE:  BRA    07B0
07B0:  NOP   
07B2:  BSF    F8B.6
07B4:  MOVLW  7C
07B6:  MOVWF  FE9
07B8:  DECFSZ FE9,F
07BA:  BRA    07B8
07BC:  NOP   
07BE:  BTFSC  01.7
07C0:  BRA    0798
07C2:  BTFSC  01.6
07C4:  BRA    07A8
07C6:  RETURN 0
....................  
.................... #define buff 10 
....................  
.................... int i; 
....................  
.................... long buffer[buff]; 
....................  
.................... float volt; 
.................... float voltAux; 
....................  
.................... void rotate(long *p) { 
.................... 	long *pri; 
.................... 	long *seg; 
.................... 	int cont; 
....................  
.................... 	pri = p; 
*
0004:  MOVFF  2D,2F
0008:  MOVFF  2C,2E
.................... 	seg = p + 1; 
000C:  MOVLW  02
000E:  ADDWF  2C,W
0010:  MOVWF  30
0012:  MOVLW  00
0014:  ADDWFC 2D,W
0016:  MOVWF  31
....................  
.................... 	for (cont = 0; cont < (buff - 1); cont++, pri++, seg++) { 
0018:  CLRF   32
001A:  MOVF   32,W
001C:  SUBLW  08
001E:  BNC   0064
.................... 		*pri = *seg; 
0020:  MOVFF  30,FE9
0024:  MOVFF  31,FEA
0028:  MOVFF  FEC,03
002C:  MOVF   FED,F
002E:  MOVFF  FEF,35
0032:  MOVFF  2F,FEA
0036:  MOVFF  2E,FE9
003A:  MOVFF  03,FEC
003E:  MOVF   FED,F
0040:  MOVFF  35,FEF
.................... 	} 
0044:  MOVF   32,W
0046:  INCF   32,F
0048:  MOVFF  2F,03
004C:  MOVFF  2E,00
0050:  MOVLW  02
0052:  ADDWF  2E,F
0054:  BTFSC  FD8.0
0056:  INCF   2F,F
0058:  MOVF   00,W
005A:  MOVLW  02
005C:  ADDWF  30,F
005E:  BTFSC  FD8.0
0060:  INCF   31,F
0062:  BRA    001A
.................... } 
0064:  GOTO   04A0 (RETURN)
....................  
.................... float media(long in) { 
*
0466:  CLRF   28
0468:  CLRF   27
046A:  CLRF   26
046C:  CLRF   25
.................... 	float media = 0; 
.................... 	long *p; 
.................... 	int cont; 
....................  
.................... 	if (i < buff) 
046E:  MOVF   04,W
0470:  SUBLW  09
0472:  BNC   0498
.................... 		buffer[i++] = in; 
0474:  MOVF   04,W
0476:  INCF   04,F
0478:  MOVWF  00
047A:  BCF    FD8.0
047C:  RLCF   00,F
047E:  MOVF   00,W
0480:  CLRF   03
0482:  ADDLW  05
0484:  MOVWF  FE9
0486:  MOVLW  00
0488:  ADDWFC 03,W
048A:  MOVWF  FEA
048C:  MOVFF  24,FEC
0490:  MOVF   FED,F
0492:  MOVFF  23,FEF
.................... 	else { 
0496:  BRA    04A8
.................... 		rotate(buffer); 
0498:  CLRF   2D
049A:  MOVLW  05
049C:  MOVWF  2C
049E:  BRA    0004
.................... 		buffer[buff - 1] = in; 
04A0:  MOVFF  24,18
04A4:  MOVFF  23,17
.................... 	} 
....................  
.................... 	p = buffer; 
04A8:  CLRF   2A
04AA:  MOVLW  05
04AC:  MOVWF  29
....................  
.................... 	for (cont = 0; cont < buff; cont++, p++) 
04AE:  CLRF   2B
04B0:  MOVF   2B,W
04B2:  SUBLW  09
04B4:  BNC   0520
.................... 		media += (float) *p; 
04B6:  MOVFF  29,FE9
04BA:  MOVFF  2A,FEA
04BE:  MOVFF  FEC,03
04C2:  MOVF   FED,F
04C4:  MOVFF  FEF,2C
04C8:  MOVFF  03,2D
04CC:  RCALL  0068
04CE:  MOVFF  FEA,2D
04D2:  MOVFF  FE9,2C
04D6:  BCF    FD8.1
04D8:  MOVFF  28,31
04DC:  MOVFF  27,30
04E0:  MOVFF  26,2F
04E4:  MOVFF  25,2E
04E8:  MOVFF  03,35
04EC:  MOVFF  02,34
04F0:  MOVFF  01,33
04F4:  MOVFF  00,32
04F8:  BRA    009E
04FA:  MOVFF  2D,FEA
04FE:  MOVFF  2C,FE9
0502:  MOVFF  03,28
0506:  MOVFF  02,27
050A:  MOVFF  01,26
050E:  MOVFF  00,25
0512:  MOVF   2B,W
0514:  INCF   2B,F
0516:  MOVLW  02
0518:  ADDWF  29,F
051A:  BTFSC  FD8.0
051C:  INCF   2A,F
051E:  BRA    04B0
....................  
.................... 	return media / i; 
0520:  CLRF   2D
0522:  MOVFF  04,2C
0526:  RCALL  0068
0528:  MOVFF  28,2F
052C:  MOVFF  27,2E
0530:  MOVFF  26,2D
0534:  MOVFF  25,2C
0538:  MOVFF  03,33
053C:  MOVFF  02,32
0540:  MOVFF  01,31
0544:  MOVFF  00,30
0548:  BRA    030A
.................... } 
054A:  GOTO   09DC (RETURN)
....................  
.................... #zero_ram 
.................... int main(void) { 
*
096A:  CLRF   FF8
096C:  BCF    FD0.7
096E:  MOVLW  FE
0970:  MOVWF  00
0972:  MOVLW  06
0974:  MOVWF  01
0976:  MOVLW  02
0978:  MOVWF  FE9
097A:  MOVLW  00
097C:  MOVWF  FEA
097E:  CLRF   FEE
0980:  DECFSZ 00,F
0982:  BRA    097E
0984:  DECFSZ 01,F
0986:  BRA    097E
0988:  CLRF   FEA
098A:  CLRF   FE9
098C:  BCF    F94.6
098E:  BSF    F8B.6
0990:  BSF    FC1.0
0992:  BSF    FC1.1
0994:  BSF    FC1.2
0996:  BCF    FC1.3
....................  
.................... 	setup_adc_ports(AN0); 
0998:  BCF    FC1.0
099A:  BSF    FC1.1
099C:  BSF    FC1.2
099E:  BSF    FC1.3
.................... 	setup_adc(ADC_CLOCK_INTERNAL); 
09A0:  BCF    FC1.6
09A2:  BSF    FC2.6
09A4:  BSF    FC2.7
09A6:  BSF    FC1.7
09A8:  BSF    FC2.0
.................... 	set_adc_channel(0); 
09AA:  MOVLW  00
09AC:  MOVWF  01
09AE:  MOVF   FC2,W
09B0:  ANDLW  C7
09B2:  IORWF  01,W
09B4:  MOVWF  FC2
.................... 	delay_us(100); 
09B6:  MOVLW  7C
09B8:  MOVWF  00
09BA:  DECFSZ 00,F
09BC:  BRA    09BA
09BE:  BRA    09C0
....................  
.................... 	while (TRUE) { 
.................... 		volt = media(read_adc()); 
09C0:  BSF    FC2.2
09C2:  BTFSC  FC2.2
09C4:  BRA    09C2
09C6:  MOVFF  FC4,03
09CA:  MOVFF  FC3,21
09CE:  MOVFF  FC4,22
09D2:  MOVFF  FC4,24
09D6:  MOVFF  FC3,23
09DA:  BRA    0466
09DC:  MOVFF  03,1C
09E0:  MOVFF  02,1B
09E4:  MOVFF  01,1A
09E8:  MOVFF  00,19
....................  
.................... 		if (volt != voltAux) { 
09EC:  MOVFF  1C,24
09F0:  MOVFF  1B,23
09F4:  MOVFF  1A,22
09F8:  MOVFF  19,21
09FC:  MOVFF  20,28
0A00:  MOVFF  1F,27
0A04:  MOVFF  1E,26
0A08:  MOVFF  1D,25
0A0C:  BRA    054E
0A0E:  BZ    0A6C
.................... 			printf("%f %f\n\r", volt, voltAux); 
0A10:  MOVLW  89
0A12:  MOVWF  FE9
0A14:  MOVFF  1C,24
0A18:  MOVFF  1B,23
0A1C:  MOVFF  1A,22
0A20:  MOVFF  19,21
0A24:  MOVLW  02
0A26:  MOVWF  25
0A28:  RCALL  07C8
0A2A:  MOVLW  20
0A2C:  MOVWF  2E
0A2E:  RCALL  0788
0A30:  MOVLW  89
0A32:  MOVWF  FE9
0A34:  MOVFF  20,24
0A38:  MOVFF  1F,23
0A3C:  MOVFF  1E,22
0A40:  MOVFF  1D,21
0A44:  MOVLW  02
0A46:  MOVWF  25
0A48:  RCALL  07C8
0A4A:  MOVLW  0A
0A4C:  MOVWF  2E
0A4E:  RCALL  0788
0A50:  MOVLW  0D
0A52:  MOVWF  2E
0A54:  RCALL  0788
.................... 			voltAux = volt; 
0A56:  MOVFF  1C,20
0A5A:  MOVFF  1B,1F
0A5E:  MOVFF  1A,1E
0A62:  MOVFF  19,1D
.................... 			delay_ms(10); 
0A66:  MOVLW  0A
0A68:  MOVWF  21
0A6A:  BRA    0940
.................... 		} 
.................... 	} 
0A6C:  BRA    09C0
.................... 	return 0; 
0A6E:  MOVLW  00
0A70:  MOVWF  01
.................... } 
0A72:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
